#version 450 core

#define PI 3.14159265359
#define SampleCount 1024

layout(binding = 2000, rg32f) uniform image2D dst_texture;

layout(push_constant) uniform ConstantBlock {
	uint lut_size;
} constant;

layout (local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

float RadicalInverse_VdC(uint bits) {
	(bits = ((bits << uint (16)) | (bits >> uint (16))));
	(bits = (((bits & 1431655765u) << uint (1)) | ((bits & 2863311530u) >> uint (1))));
	(bits = (((bits & 858993459u) << uint (2)) | ((bits & 3435973836u) >> uint (2))));
	(bits = (((bits & 252645135u) << uint (4)) | ((bits & 4042322160u) >> uint (4))));
	(bits = (((bits & 16711935u) << uint (8)) | ((bits & 4278255360u) >> uint (8))));
	return (float(bits) * 2.328306e-10);
}

vec2 Hammersley(uint i, uint N) {
	return vec2((float(i) / float(N)), RadicalInverse_VdC(i));
}

vec3 ImportanceSampleGGX(vec2 Xi, vec3 N, float roughness) {
	float a = (roughness * roughness);

	float phi = 2.0 * PI * Xi.x;
	float cos_theta = sqrt((1.0 - Xi.y) / (1.0 + ((a * a - 1.0) * Xi.y)));
	float sin_theta = sqrt(1.0 - (cos_theta * cos_theta));

	vec3 H;
	H.x = cos(phi) * sin_theta;
	H.y = sin(phi) * sin_theta;
	H.z = cos_theta;

	vec3 up = abs(N.z) < 0.999 ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0);
	vec3 tangent = normalize(cross(up, N));
	vec3 bitangent = cross(N, tangent);

	vec3 sample_vec = tangent * vec3(H.x) + bitangent * vec3(H.y) + N * vec3(H.z);
	return normalize(sample_vec);
}

float GeometrySchlickGGX(float NdotV, float roughness) {
	float a = roughness;
	float k = (a * a) / 2.0;

	float nom = NdotV;
	float denom = NdotV * (1.0 - k) + k;

	return nom / denom;
}

float GeometrySmith(vec3 N, vec3 V, vec3 L, float roughness) {
	float NdotV = max(dot(N, V), 0.0);
	float NdotL = max(dot(N, L), 0.0);
	float ggx2 = GeometrySchlickGGX(NdotV, roughness);
	float ggx1 = GeometrySchlickGGX(NdotL, roughness);

	return ggx1 * ggx2;
}

vec2 IntegrateBRDF(float NdotV, float roughness) {
	vec3 V;
	V.x = sqrt(1.0 - NdotV * NdotV);
	V.y = 0.0;
	V.z = NdotV;

	float A = 0.0;
	float B = 0.0;

	vec3 N = vec3(0.0, 0.0, 1.0);
	for (int i = 0; i < SampleCount; ++i) {
		vec2 Xi = Hammersley(i, SampleCount);
		vec3 H = ImportanceSampleGGX(Xi, N, roughness);
		vec3 L = normalize(2.0 * dot(V, H) * H - V);

		float NdotL = max(L.z, 0.0);
		float NdotH = max(H.z, 0.0);
		float VdotH = max(dot(V, H), 0.0);

		if (NdotL > 0.0) {
			float G = GeometrySmith(N, V, L, roughness);
			float G_Vis = (G * VdotH) / (NdotH * NdotV);
			float Fc = pow(1.0 - VdotH, 5.0);

			A += (1.0 - Fc) * G_Vis;
			B += Fc * G_Vis;
		}
	}

	A /= float(SampleCount);
	B /= float(SampleCount);

	return vec2(A, B);
}

void main() {
	vec2 texcoords = vec2(float(gl_GlobalInvocationID.x + 0.5) / constant.lut_size, 1.0 - float(gl_GlobalInvocationID.y + 0.5) / constant.lut_size);
	imageStore(dst_texture, ivec2(gl_GlobalInvocationID), vec4(IntegrateBRDF(texcoords.x, texcoords.y), 0.0, 0.0));
}