#version 450 core

#define PI 3.14159265359
#define SampleCount 1024

layout(binding = 1000) uniform textureCube src_texture;
layout(binding = 3000) uniform sampler src_sampler;
layout(binding = 2000, rgba32f) uniform image2DArray dst_texture;

layout(push_constant) uniform ConstantBlock {
    uint mip_level;
	uint mip_size;
	float roughness;
} constant;

layout(local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

float RadicalInverse_VdC(uint bits) {
	(bits = ((bits << uint (16)) | (bits >> uint (16))));
	(bits = (((bits & 1431655765u) << uint (1)) | ((bits & 2863311530u) >> uint (1))));
	(bits = (((bits & 858993459u) << uint (2)) | ((bits & 3435973836u) >> uint (2))));
	(bits = (((bits & 252645135u) << uint (4)) | ((bits & 4042322160u) >> uint (4))));
	(bits = (((bits & 16711935u) << uint (8)) | ((bits & 4278255360u) >> uint (8))));
	return (float(bits) * 2.328306e-10);
}

vec2 Hammersley(uint i, uint N) {
	return vec2((float(i) / float(N)), RadicalInverse_VdC(i));
}

vec3 ImportanceSampleGGX(vec2 Xi, vec3 N, float roughness) {
	float a = (roughness * roughness);

	float phi = 2.0 * PI * Xi.x;
	float cos_theta = sqrt((1.0 - Xi.y) / (1.0 + ((a * a - 1.0) * Xi.y)));
	float sin_theta = sqrt(1.0 - (cos_theta * cos_theta));

	vec3 H;
	H.x = cos(phi) * sin_theta;
	H.y = sin(phi) * sin_theta;
	H.z = cos_theta;

	vec3 up = abs(N.z) < 0.999 ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0);
	vec3 tangent = normalize(cross(up, N));
	vec3 bitangent = cross(N, tangent);

	vec3 sample_vec = tangent * vec3(H.x) + bitangent * vec3(H.y) + N * vec3(H.z);
	return normalize(sample_vec);
}

void main() {
	uint mip_level = constant.mip_level;
	float mip_size = float(constant.max_size >> mip_level);
	float roughness = (RootConstant).roughness;

	vec3 thread_pos = vec3(gl_GlobalInvocationID);
	vec2 texcoords = vec2((thread_pos.x + 0.5) / mip_size, (thread_pos.y + 0.5) / mip_size);
	texcoords = (texcoords * 2.0) - 1.0;

	vec3 sphere_dir;
	// +x
	if (thread_pos.z <= 0.0) {
		sphere_dir = normalize(vec3(1.0, -texcoords.y, -texcoords.x));
	}
	// -x
	else if (thread_pos.z <= 1.0) {
		sphere_dir = normalize(vec3(-1.0, -texcoords.y, texcoords.x));
	}
	// +y
	else if (thread_pos.z <= 2.0) {
		sphere_dir = normalize(vec3(texcoords.x, 1.0, texcoords.y));
	}
	// -y
	else if (thread_pos.z <= 3.0) {
		sphere_dir = normalize(vec3(texcoords.x, -1.0, -texcoords.y));
	}
	// +z
	else if (thread_pos.z <= 4.0) {
		sphere_dir = normalize(vec3(texcoords.x, -texcoords.y, 1.0));
	}
	// -z
	else if (thread_pos.z <= 5.0) {
		sphere_dir = normalize(vec3(-texcoords.x, -texcoords.y, -1.0));
	}

	vec3 N = sphere_dir;
	vec3 R = N;
	vec3 V = R;

	float total_weight = 0.0;
	vec4 prefiltered_color = vec4(0.0, 0.0, 0.0, 0.0);

	for (int i = 0; i < SampleCount; ++i) {
		vec2 Xi = Hammersley(uint(i), uint(SampleCount));
		vec3 H = ImportanceSampleGGX(Xi, N, roughness);
		vec3 L = normalize((vec3(2.0 * dot(V, H)) * H) - V);

		float NdotL = max(dot(N, L), 0.0);
		if (NdotL > 0.0) {
			prefiltered_color += textureLod(samplerCube(src_texture, src_sampler), vec3(L), 0.0) * NdotL;

			total_weight += NdotL;
		}
	}

	prefiltered_color = prefiltered_color / total_weight;
	imageStore(dst_texture, ivec3(thread_pos), prefiltered_color);
}