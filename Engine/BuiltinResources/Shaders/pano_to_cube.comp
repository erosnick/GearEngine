#version 450
#extension GL_ARB_separate_shader_objects : enable

layout(binding = 1000) uniform texture2D src_texture;
layout(binding = 3000) uniform sampler src_sampler;
layout(binding = 2000, rgba32f) uniform image2DArray dst_texture;

layout(push_constant) uniform ConstantBlock {
	uint mip_level;
	uint max_size;
} constant;


layout(local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

void main() {
    vec3 thread_pos = vec3(gl_GlobalInvocationID);
    float PI = 3.14159274;
	vec2 inv_atan = vec2(0.1591, 0.31830000);
	uint mip_level = constant.mip_level;
	float mip_size = float(constant.max_size >> mip_level);

	if ((thread_pos.x >= mip_size) || (thread_pos.y >= mip_size)) 
		return;

	vec2 texcoords = vec2(((thread_pos.x + 0.5) / mip_size), ((thread_pos.y + 0.5) / mip_size));
    texcoords = (texcoords * 2.0) - 1.0;

	vec3 sphere_dir;
    // +x
	if (thread_pos.z <= 0.0) {
		sphere_dir = normalize(vec3(1.0, texcoords.y, -texcoords.x));
    }
    // -x
	else if (thread_pos.z <= 1.0) {
        sphere_dir = normalize(vec3(-1.0, texcoords.y, texcoords.x));
    }
    // +y
    else if (thread_pos.z <= 2.0) {
        sphere_dir = normalize(vec3(texcoords.x, -1.0, texcoords.y));
    }
    // -y
    else if (thread_pos.z <= 3.0) {
        sphere_dir = normalize(vec3(texcoords.x, 1.0, -texcoords.y));
    }
    // +z
    else if (thread_pos.z <= 4.0) {
        sphere_dir = normalize(vec3(texcoords.x, texcoords.y, 1.0));
    }
    // -z
    else if (thread_pos.z <= 5.0) {
        sphere_dir = normalize(vec3(-texcoords.x, texcoords.y, -1.0));
    }

	vec2 pano_uvs = vec2(atan(sphere_dir.z, sphere_dir.x), asin(sphere_dir.y));
	pano_uvs *= inv_atan;
	pano_uvs += vec2(0.5);

	imageStore(dst_texture, ivec3(uvec3(thread_pos.x, thread_pos.y, thread_pos.z)), texture(sampler2D(src_texture, src_sampler), vec2(pano_uvs)));
}