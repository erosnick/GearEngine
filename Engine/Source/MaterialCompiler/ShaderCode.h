#pragma once
namespace gear {
const char BRDF_INTEGRATION_COMP_DATA[] = "#version 450 core\n\n#define PI 3.14159265359\n#define SampleCount 1024\n\nlayout(binding = 2000, rg32f) uniform image2D dst_texture;\n\nlayout(push_constant) uniform ConstantBlock {\n	uint lut_size;\n} constant;\n\nlayout (local_size_x = 16, local_size_y = 16, local_size_z = 1) in;\n\nfloat RadicalInverse_VdC(uint bits) {\n	(bits = ((bits << uint (16)) | (bits >> uint (16))));\n	(bits = (((bits & 1431655765u) << uint (1)) | ((bits & 2863311530u) >> uint (1))));\n	(bits = (((bits & 858993459u) << uint (2)) | ((bits & 3435973836u) >> uint (2))));\n	(bits = (((bits & 252645135u) << uint (4)) | ((bits & 4042322160u) >> uint (4))));\n	(bits = (((bits & 16711935u) << uint (8)) | ((bits & 4278255360u) >> uint (8))));\n	return (float(bits) * 2.328306e-10);\n}\n\nvec2 Hammersley(uint i, uint N) {\n	return vec2((float(i) / float(N)), RadicalInverse_VdC(i));\n}\n\nvec3 ImportanceSampleGGX(vec2 Xi, vec3 N, float roughness) {\n	float a = (roughness * roughness);\n\n	float phi = 2.0 * PI * Xi.x;\n	float cos_theta = sqrt((1.0 - Xi.y) / (1.0 + ((a * a - 1.0) * Xi.y)));\n	float sin_theta = sqrt(1.0 - (cos_theta * cos_theta));\n\n	vec3 H;\n	H.x = cos(phi) * sin_theta;\n	H.y = sin(phi) * sin_theta;\n	H.z = cos_theta;\n\n	vec3 up = abs(N.z) < 0.999 ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0);\n	vec3 tangent = normalize(cross(up, N));\n	vec3 bitangent = cross(N, tangent);\n\n	vec3 sample_vec = tangent * vec3(H.x) + bitangent * vec3(H.y) + N * vec3(H.z);\n	return normalize(sample_vec);\n}\n\nfloat GeometrySchlickGGX(float NdotV, float roughness) {\n	float a = roughness;\n	float k = (a * a) / 2.0;\n\n	float nom = NdotV;\n	float denom = NdotV * (1.0 - k) + k;\n\n	return nom / denom;\n}\n\nfloat GeometrySmith(vec3 N, vec3 V, vec3 L, float roughness) {\n	float NdotV = max(dot(N, V), 0.0);\n	float NdotL = max(dot(N, L), 0.0);\n	float ggx2 = GeometrySchlickGGX(NdotV, roughness);\n	float ggx1 = GeometrySchlickGGX(NdotL, roughness);\n\n	return ggx1 * ggx2;\n}\n\nvec2 IntegrateBRDF(float NdotV, float roughness) {\n	vec3 V;\n	V.x = sqrt(1.0 - NdotV * NdotV);\n	V.y = 0.0;\n	V.z = NdotV;\n\n	float A = 0.0;\n	float B = 0.0;\n\n	vec3 N = vec3(0.0, 0.0, 1.0);\n	for (int i = 0; i < SampleCount; ++i) {\n		vec2 Xi = Hammersley(i, SampleCount);\n		vec3 H = ImportanceSampleGGX(Xi, N, roughness);\n		vec3 L = normalize(2.0 * dot(V, H) * H - V);\n\n		float NdotL = max(L.z, 0.0);\n		float NdotH = max(H.z, 0.0);\n		float VdotH = max(dot(V, H), 0.0);\n\n		if (NdotL > 0.0) {\n			float G = GeometrySmith(N, V, L, roughness);\n			float G_Vis = (G * VdotH) / (NdotH * NdotV);\n			float Fc = pow(1.0 - VdotH, 5.0);\n\n			A += (1.0 - Fc) * G_Vis;\n			B += Fc * G_Vis;\n		}\n	}\n\n	A /= float(SampleCount);\n	B /= float(SampleCount);\n\n	return vec2(A, B);\n}\n\nvoid main() {\n	vec2 texcoords = vec2(float(gl_GlobalInvocationID.x + 0.5) / constant.lut_size, 1.0 - float(gl_GlobalInvocationID.y + 0.5) / constant.lut_size);\n	imageStore(dst_texture, ivec2(gl_GlobalInvocationID), vec4(IntegrateBRDF(texcoords.x, texcoords.y), 0.0, 0.0));\n}";
const char COMMON_DATA_FS_DATA[] = "layout(std140, set = 0, binding = 1) uniform FrameUniforms {\n    mat4 view_matrix;\n    mat4 main_view_matrix;\n    mat4 proj_matrix;\n    mat4 sun_matrixs[SHADOW_CASCADE_COUNT];\n    vec4 sun_direction;\n    vec4 cascade_splits;\n} frame_uniforms;\n\nlayout(std140, set = 0, binding = 2) uniform ObjectUniforms {\n    mat4 model_matrix;\n    mat4 normal_matrix;\n} object_uniforms;\n\n#if defined(HAS_SHADOWING)\nlayout(set = 0, binding = 1010) uniform texture2DArray cascade_shadow_map;\nlayout(set = 0, binding = 3010) uniform sampler cascade_shadow_sampler;\n#endif";
const char COMPUTE_IRRADIANCE_MAP_COMP_DATA[] = "#version 450 core\n\n#define PI 3.14159265359\n#define SampleDelta 0.025\n\nlayout(binding = 1000) uniform textureCube src_texture;\nlayout(binding = 3000) uniform sampler src_sampler;\nlayout(binding = 2000, rgba32f) uniform image2DArray dst_texture;\n\nlayout(push_constant) uniform ConstantBlock {\n	uint mip_level;\n	uint max_size;\n} constant;\n\nlayout(local_size_x = 16, local_size_y = 16, local_size_z = 1) in;\n\nvec4 ComputeIrradiance(vec3 N) {\n    vec4 irradiance = vec4(0.0);\n\n    vec3 up = vec3(0.000000, 1.000000, 0.000000);\n    vec3 right = cross(up, N);\n    up = cross(N, right);\n\n    float num_samples = 0.0;\n\n    for (float phi = 0.0; phi < 2.0 * PI; phi += SampleDelta) {\n        for (float theta = 0.0; theta < 0.5 * PI; theta += SampleDelta) {\n            vec3 tangent_sample = vec3(sin(theta) * cos(phi), sin(theta) * sin(phi), cos(theta));\n\n            vec3 sample_vec = vec3(tangent_sample.x) * right + vec3(tangent_sample.y) * up + vec3(tangent_sample.z) * N;\n\n            vec4 sampled_value = textureLod(samplerCube(src_texture, src_sampler), sample_vec, 0.0);\n\n            irradiance += vec4(sampled_value.rgb * vec3(cos(theta)) * vec3(sin(theta)), sampled_value.a);\n            num_samples++;\n        }\n    }\n\n    return PI * irradiance * vec4(1.0 / num_samples);\n}\n\nvoid main() {\n    uint mip_level = constant.mip_level;\n    float mip_size = float(constant.max_size >> mip_level);\n\n    vec3 thread_pos = vec3(gl_GlobalInvocationID);\n    vec2 texcoords = vec2((thread_pos.x + 0.5) / mip_size, (thread_pos.y + 0.5) / mip_size);\n    texcoords = (texcoords * 2.0) - 1.0;\n\n    vec3 sphere_dir;\n    // +x\n	if (thread_pos.z <= 0.0) {\n		sphere_dir = normalize(vec3(1.0, -texcoords.y, -texcoords.x));\n    }\n    // -x\n	else if (thread_pos.z <= 1.0) {\n        sphere_dir = normalize(vec3(-1.0, -texcoords.y, texcoords.x));\n    }\n    // +y\n    else if (thread_pos.z <= 2.0) {\n        sphere_dir = normalize(vec3(texcoords.x, 1.0, texcoords.y));\n    }\n    // -y\n    else if (thread_pos.z <= 3.0) {\n        sphere_dir = normalize(vec3(texcoords.x, -1.0, -texcoords.y));\n    }\n    // +z\n    else if (thread_pos.z <= 4.0) {\n        sphere_dir = normalize(vec3(texcoords.x, -texcoords.y, 1.0));\n    }\n    // -z\n    else if (thread_pos.z <= 5.0) {\n        sphere_dir = normalize(vec3(-texcoords.x, -texcoords.y, -1.0));\n    }\n\n    vec4 irradiance = ComputeIrradiance(sphere_dir);\n\n    imageStore(dst_texture, ivec3(ivec3(thread_pos)), irradiance);\n}";
const char COMPUTE_SPECULAR_MAP_COMP_DATA[] = "#version 450 core\n\n#define PI 3.14159265359\n#define SampleCount 1024\n\nlayout(binding = 1000) uniform textureCube src_texture;\nlayout(binding = 3000) uniform sampler src_sampler;\nlayout(binding = 2000, rgba32f) uniform image2DArray dst_texture;\n\nlayout(push_constant) uniform ConstantBlock {\n    uint mip_level;\n	uint max_size;\n	float roughness;\n} constant;\n\nlayout(local_size_x = 16, local_size_y = 16, local_size_z = 1) in;\n\nfloat RadicalInverse_VdC(uint bits) {\n	(bits = ((bits << uint (16)) | (bits >> uint (16))));\n	(bits = (((bits & 1431655765u) << uint (1)) | ((bits & 2863311530u) >> uint (1))));\n	(bits = (((bits & 858993459u) << uint (2)) | ((bits & 3435973836u) >> uint (2))));\n	(bits = (((bits & 252645135u) << uint (4)) | ((bits & 4042322160u) >> uint (4))));\n	(bits = (((bits & 16711935u) << uint (8)) | ((bits & 4278255360u) >> uint (8))));\n	return (float(bits) * 2.328306e-10);\n}\n\nvec2 Hammersley(uint i, uint N) {\n	return vec2((float(i) / float(N)), RadicalInverse_VdC(i));\n}\n\nvec3 ImportanceSampleGGX(vec2 Xi, vec3 N, float roughness) {\n	float a = (roughness * roughness);\n\n	float phi = 2.0 * PI * Xi.x;\n	float cos_theta = sqrt((1.0 - Xi.y) / (1.0 + ((a * a - 1.0) * Xi.y)));\n	float sin_theta = sqrt(1.0 - (cos_theta * cos_theta));\n\n	vec3 H;\n	H.x = cos(phi) * sin_theta;\n	H.y = sin(phi) * sin_theta;\n	H.z = cos_theta;\n\n	vec3 up = abs(N.z) < 0.999 ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0);\n	vec3 tangent = normalize(cross(up, N));\n	vec3 bitangent = cross(N, tangent);\n\n	vec3 sample_vec = tangent * vec3(H.x) + bitangent * vec3(H.y) + N * vec3(H.z);\n	return normalize(sample_vec);\n}\n\nvoid main() {\n	uint mip_level = constant.mip_level;\n	float mip_size = float(constant.max_size >> mip_level);\n	float roughness = constant.roughness;\n\n	vec3 thread_pos = vec3(gl_GlobalInvocationID);\n	vec2 texcoords = vec2((thread_pos.x + 0.5) / mip_size, (thread_pos.y + 0.5) / mip_size);\n	texcoords = (texcoords * 2.0) - 1.0;\n\n	vec3 sphere_dir;\n	// +x\n	if (thread_pos.z <= 0.0) {\n		sphere_dir = normalize(vec3(1.0, -texcoords.y, -texcoords.x));\n	}\n	// -x\n	else if (thread_pos.z <= 1.0) {\n		sphere_dir = normalize(vec3(-1.0, -texcoords.y, texcoords.x));\n	}\n	// +y\n	else if (thread_pos.z <= 2.0) {\n		sphere_dir = normalize(vec3(texcoords.x, 1.0, texcoords.y));\n	}\n	// -y\n	else if (thread_pos.z <= 3.0) {\n		sphere_dir = normalize(vec3(texcoords.x, -1.0, -texcoords.y));\n	}\n	// +z\n	else if (thread_pos.z <= 4.0) {\n		sphere_dir = normalize(vec3(texcoords.x, -texcoords.y, 1.0));\n	}\n	// -z\n	else if (thread_pos.z <= 5.0) {\n		sphere_dir = normalize(vec3(-texcoords.x, -texcoords.y, -1.0));\n	}\n\n	vec3 N = sphere_dir;\n	vec3 R = N;\n	vec3 V = R;\n\n	float total_weight = 0.0;\n	vec4 prefiltered_color = vec4(0.0, 0.0, 0.0, 0.0);\n\n	for (int i = 0; i < SampleCount; ++i) {\n		vec2 Xi = Hammersley(uint(i), uint(SampleCount));\n		vec3 H = ImportanceSampleGGX(Xi, N, roughness);\n		vec3 L = normalize((vec3(2.0 * dot(V, H)) * H) - V);\n\n		float NdotL = max(dot(N, L), 0.0);\n		if (NdotL > 0.0) {\n			prefiltered_color += textureLod(samplerCube(src_texture, src_sampler), vec3(L), 0.0) * NdotL;\n\n			total_weight += NdotL;\n		}\n	}\n\n	prefiltered_color = prefiltered_color / total_weight;\n	imageStore(dst_texture, ivec3(thread_pos), prefiltered_color);\n}";
const char DEPTH_MAIN_FS_DATA[] = "void main() {\n}\n";
const char DEPTH_MAIN_VS_DATA[] = "void main() {\n    MaterialVertexParams material_params;\n\n    InitMaterialVertexParams(material_params);\n\n    ProcessMaterialVertexParams(material_params);\n\n    gl_Position = frame_uniforms.proj_matrix * frame_uniforms.view_matrix * material_params.world_position;\n}\n";
const char INPUTS_FS_DATA[] = "layout(location = 0) in highp vec3 vertex_world_position;\n\n#if defined(HAS_ATTRIBUTE_UV0) && !defined(HAS_ATTRIBUTE_UV1)\nlayout(location = 5) in highp vec2 vertex_uv01;\n#elif defined(HAS_ATTRIBUTE_UV1)\nlayout(location = 5) in highp vec4 vertex_uv01;\n#endif\n\n#if defined(HAS_ATTRIBUTE_NORMAL)\nlayout(location = 6) in highp vec3 vertex_normal;\n#endif\n\n#if defined(HAS_ATTRIBUTE_COLOR)\nlayout(location = 7) in mediump vec4 vertex_color;\n#endif";
const char INPUTS_VS_DATA[] = "layout(location = LOCATION_POSITION) in vec4 mesh_position;\n\n#if defined(HAS_ATTRIBUTE_NORMAL)\nlayout(location = LOCATION_NORMAL) in vec3 mesh_normal;\nlayout(location = LOCATION_TANGENT) in vec3 mesh_tangent;\nlayout(location = LOCATION_BITANGENT) in vec3 mesh_bitangent;\n#endif\n\n#if defined(HAS_ATTRIBUTE_COLOR)\nlayout(location = LOCATION_COLOR) in vec4 mesh_color;\n#endif\n\n#if defined(HAS_ATTRIBUTE_UV0)\nlayout(location = LOCATION_UV0) in vec2 mesh_uv0;\n#endif\n\n#if defined(HAS_ATTRIBUTE_UV1)\nlayout(location = LOCATION_UV1) in vec2 mesh_uv1;\n#endif\n\n#if defined(HAS_ATTRIBUTE_BONE_INDICES)\nlayout(location = LOCATION_BONE_INDICES) in uvec4 mesh_bone_indices;\nlayout(location = LOCATION_BONE_WEIGHTS) in vec4 mesh_bone_weights;\n#endif\n\n\n#if defined(HAS_ATTRIBUTE_CUSTOM0)\nlayout(location = LOCATION_CUSTOM0) in vec4 mesh_custom0;\n#endif\n\n#if defined(HAS_ATTRIBUTE_CUSTOM1)\nlayout(location = LOCATION_CUSTOM1) in vec4 mesh_custom1;\n#endif\n\n#if defined(HAS_ATTRIBUTE_CUSTOM2)\nlayout(location = LOCATION_CUSTOM2) in vec4 mesh_custom2;\n#endif\n\n#if defined(HAS_ATTRIBUTE_CUSTOM3)\nlayout(location = LOCATION_CUSTOM3) in vec4 mesh_custom3;\n#endif\n\n#if defined(HAS_ATTRIBUTE_CUSTOM4)\nlayout(location = LOCATION_CUSTOM4) in vec4 mesh_custom4;\n#endif\n\n#if defined(HAS_ATTRIBUTE_CUSTOM5)\nlayout(location = LOCATION_CUSTOM5) in vec4 mesh_custom5;\n#endif\n\nlayout(location = 0) out highp vec3 vertex_world_position;\n\nlayout(location = 1) out highp vec4 vertex_position;\n\n#if defined(HAS_ATTRIBUTE_UV0) && !defined(HAS_ATTRIBUTE_UV1)\nlayout(location = 5) out highp vec2 vertex_uv01;\n#elif defined(HAS_ATTRIBUTE_UV1)\nlayout(location = 5) out highp vec4 vertex_uv01;\n#endif\n\n#if defined(HAS_ATTRIBUTE_NORMAL)\nlayout(location = 6) out highp vec3 vertex_normal;\n#endif\n\n#if defined(HAS_ATTRIBUTE_COLOR)\nlayout(location = 7) out mediump vec4 vertex_color;\n#endif\n";
const char LIGHT_DIRECTIONAL_FS_DATA[] = "#if defined(HAS_SHADOWING)\n\nfloat SampleCascadeShadowMap(const uint cascade, vec2 base, vec2 dudv, float depth, float bias) {\n    return depth - bias > texture(sampler2DArray(cascade_shadow_map, cascade_shadow_sampler), vec3(base + dudv, cascade)).r ? 0.5 : 0.0;\n}\n\nfloat SampleCascadeShadowMapWithPCF() {\n    vec3 view_position = (frame_uniforms.main_view_matrix * vec4(vertex_world_position, 1.0)).xyz;\n    bvec3 greater_z = greaterThan(vec3(abs(view_position.z)), frame_uniforms.cascade_splits.xyz);\n    uint cascade = clamp(uint(dot(vec3(greater_z), vec3(1.0))), 0u, SHADOW_CASCADE_COUNT - 1u);\n\n    vec4 light_space_position = (frame_uniforms.sun_matrixs[cascade] * vec4(vertex_world_position, 1.0));\n    vec3 proj_coords = light_space_position.xyz / light_space_position.w;\n    proj_coords.xy = proj_coords.xy * 0.5 + 0.5;\n\n    vec2 size = vec2(textureSize(sampler2DArray(cascade_shadow_map, cascade_shadow_sampler), 0));\n    vec2 texel_size = vec2(1.0) / size;\n\n	vec2 uv = proj_coords.xy;\n    float depth = proj_coords.z;\n\n    float bias = 0.003;\n#if defined(HAS_ATTRIBUTE_NORMAL)\n    //bias = max(0.003 * (1.0 - dot(normalize(vertex_normal), normalize(frame_uniforms.sun_direction.xyz))), 0.0005);\n#endif\n\n    float sum = 0.0;\n\n    sum += SampleCascadeShadowMap(cascade, uv, vec2(0.0, 0.0), depth, bias);\n\n    sum += SampleCascadeShadowMap(cascade, uv, vec2(texel_size.x, 0.0), depth, bias);\n    sum += SampleCascadeShadowMap(cascade, uv, vec2(-texel_size.x, 0.0), depth, bias);\n\n    sum += SampleCascadeShadowMap(cascade, uv, vec2(0.0, texel_size.y), depth, bias);\n    sum += SampleCascadeShadowMap(cascade, uv, vec2(0.0, -texel_size.y), depth, bias);\n\n    sum += SampleCascadeShadowMap(cascade, uv, vec2(texel_size.x, texel_size.y), depth, bias);\n    sum += SampleCascadeShadowMap(cascade, uv, vec2(texel_size.x, -texel_size.y), depth, bias);\n\n    sum += SampleCascadeShadowMap(cascade, uv, vec2(-texel_size.x, texel_size.y), depth, bias);\n    sum += SampleCascadeShadowMap(cascade, uv, vec2(-texel_size.x, -texel_size.y), depth, bias);\n\n    return sum * (1.0 / 9.0);\n}\n#endif\n\nvoid EvaluateDirectionalLight(const MaterialFragmentParams material_params, inout vec3 color) {\n    color = material_params.base_color.xyz;\n\n#if defined(HAS_ATTRIBUTE_NORMAL)\n    color = max(dot(vertex_normal, -frame_uniforms.sun_direction.xyz), 0.0) * vec3(0.6);\n#endif\n\n#if defined(HAS_SHADOWING)\n    float visibility = SampleCascadeShadowMapWithPCF();\n    color *= (1.0 - visibility);\n    color += 0.3;\n#endif\n}";
const char LIGHT_PUNCTUAL_FS_DATA[] = "void EvaluatePunctualLights(const MaterialFragmentParams material_params, inout vec3 color) {\n    color = material_params.base_color.xyz;\n}";
const char MAIN_FS_DATA[] = "layout(location = 0) out vec4 fragColor;\n\nvoid main() {\n    MaterialFragmentParams material_params;\n\n    InitMaterialFragmentParams(material_params);\n\n    ProcessMaterialFragmentParams(material_params);\n    \n    fragColor = EvaluateMaterial(material_params);\n}\n";
const char MAIN_VS_DATA[] = "void main() {\n    MaterialVertexParams material_params;\n\n    InitMaterialVertexParams(material_params);\n\n    ProcessMaterialVertexParams(material_params);\n\n    vertex_position = frame_uniforms.view_matrix * material_params.world_position;\n\n    vertex_world_position = material_params.world_position.xyz;\n\n#if defined(HAS_ATTRIBUTE_UV0)\n    vertex_uv01.xy = material_params.uv0;\n#endif\n#if defined(HAS_ATTRIBUTE_UV1)\n    vertex_uv01.zw = material_params.uv1;\n#endif\n\n#if defined(HAS_ATTRIBUTE_COLOR)\n    vertex_color = material_params.color;\n#endif\n\n#if defined(HAS_ATTRIBUTE_NORMAL)\n    vertex_normal = material_params.world_normal;\n#endif\n\n    gl_Position = frame_uniforms.proj_matrix * frame_uniforms.view_matrix * material_params.world_position;\n}\n";
const char MATERIAL_PARAMS_FS_DATA[] = "struct MaterialFragmentParams {\n    vec4  base_color;\n};\n\nvoid InitMaterialFragmentParams(out MaterialFragmentParams params) {\n    params.base_color = vec4(1.0);\n}";
const char MATERIAL_PARAMS_VS_DATA[] = "struct MaterialVertexParams {\n    vec4 world_position;\n\n#ifdef HAS_ATTRIBUTE_NORMAL\n    vec3 world_normal;\n#endif\n\n#ifdef HAS_ATTRIBUTE_COLOR\n    vec4 color;\n#endif\n\n#ifdef HAS_ATTRIBUTE_UV0\n    vec2 uv0;\n#endif\n\n#ifdef HAS_ATTRIBUTE_UV1\n    vec2 uv1;\n#endif\n};\n\nvoid InitMaterialVertexParams(out MaterialVertexParams params) {\n    params.world_position = object_uniforms.model_matrix * mesh_position;\n\n#ifdef HAS_ATTRIBUTE_COLOR\n    params.color = mesh_color;\n#endif\n\n#ifdef HAS_ATTRIBUTE_UV0\n    params.uv0 = mesh_uv0;\n#endif\n\n#ifdef HAS_ATTRIBUTE_UV1\n    params.uv1 = mesh_uv1;\n#endif\n\n#ifdef HAS_ATTRIBUTE_NORMAL\n    params.world_normal = normalize(mat3(object_uniforms.normal_matrix) * mesh_normal);\n#endif\n}\n";
const char PANO_TO_CUBE_COMP_DATA[] = "#version 450\n#extension GL_ARB_separate_shader_objects : enable\n\nlayout(binding = 1000) uniform texture2D src_texture;\nlayout(binding = 3000) uniform sampler src_sampler;\nlayout(binding = 2000, rgba32f) uniform image2DArray dst_texture;\n\nlayout(push_constant) uniform ConstantBlock {\n	uint mip_level;\n	uint max_size;\n} constant;\n\n\nlayout(local_size_x = 16, local_size_y = 16, local_size_z = 1) in;\n\nvoid main() {\n    vec3 thread_pos = vec3(gl_GlobalInvocationID);\n    float PI = 3.14159274;\n	vec2 inv_atan = vec2(0.1591, 0.31830000);\n	uint mip_level = constant.mip_level;\n	float mip_size = float(constant.max_size >> mip_level);\n\n	if ((thread_pos.x >= mip_size) || (thread_pos.y >= mip_size)) \n		return;\n\n	vec2 texcoords = vec2(((thread_pos.x + 0.5) / mip_size), ((thread_pos.y + 0.5) / mip_size));\n    texcoords = (texcoords * 2.0) - 1.0;\n\n	vec3 sphere_dir;\n    // +x\n	if (thread_pos.z <= 0.0) {\n		sphere_dir = normalize(vec3(1.0, texcoords.y, -texcoords.x));\n    }\n    // -x\n	else if (thread_pos.z <= 1.0) {\n        sphere_dir = normalize(vec3(-1.0, texcoords.y, texcoords.x));\n    }\n    // +y\n    else if (thread_pos.z <= 2.0) {\n        sphere_dir = normalize(vec3(texcoords.x, -1.0, texcoords.y));\n    }\n    // -y\n    else if (thread_pos.z <= 3.0) {\n        sphere_dir = normalize(vec3(texcoords.x, 1.0, -texcoords.y));\n    }\n    // +z\n    else if (thread_pos.z <= 4.0) {\n        sphere_dir = normalize(vec3(texcoords.x, texcoords.y, 1.0));\n    }\n    // -z\n    else if (thread_pos.z <= 5.0) {\n        sphere_dir = normalize(vec3(-texcoords.x, texcoords.y, -1.0));\n    }\n\n	vec2 pano_uvs = vec2(atan(sphere_dir.z, sphere_dir.x), asin(sphere_dir.y));\n	pano_uvs *= inv_atan;\n	pano_uvs += vec2(0.5);\n\n	imageStore(dst_texture, ivec3(uvec3(thread_pos.x, thread_pos.y, thread_pos.z)), texture(sampler2D(src_texture, src_sampler), vec2(pano_uvs)));\n}";
const char SHADING_LIT_FS_DATA[] = "vec4 EvaluateLights(const MaterialFragmentParams material_params) {\n    vec3 color = vec3(0.0);\n\n#if defined(HAS_DIRECTIONAL_LIGHTING)\n    EvaluateDirectionalLight(material_params, color);\n#endif\n\n#if defined(HAS_DYNAMIC_LIGHTING)\n    EvaluatePunctualLights(material_params, color);\n#endif\n\n    return vec4(color, material_params.base_color.a);\n}\n\nvec4 EvaluateMaterial(const MaterialFragmentParams material_params) {\n    vec4 color = EvaluateLights(material_params);\n    return color;\n}";
const char SHADING_UNLIT_FS_DATA[] = "vec4 EvaluateMaterial(const MaterialFragmentParams material_params) {\n    vec4 color = material_params.base_color;\n    return color;\n}";
}
